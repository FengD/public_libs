// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace itd {
namespace communication {
namespace protobuf {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class PointCloudDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointCloud>
      _instance;
} _PointCloud_default_instance_;
class FreespaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Freespace>
      _instance;
} _Freespace_default_instance_;
class TrailerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trailer>
      _instance;
} _Trailer_default_instance_;
class BridgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bridge>
      _instance;
} _Bridge_default_instance_;
class BoundryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Boundry>
      _instance;
} _Boundry_default_instance_;
class ContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Container>
      _instance;
} _Container_default_instance_;
class SignboardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signboard>
      _instance;
} _Signboard_default_instance_;
class LidarStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarStatus>
      _instance;
} _LidarStatus_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
  const ::itd::communication::protobuf::PointCloud* cloud_;
  const ::itd::communication::protobuf::Freespace* fs_;
  const ::itd::communication::protobuf::Trailer* trailer_;
  const ::itd::communication::protobuf::Bridge* bridge_;
  const ::itd::communication::protobuf::Boundry* boundry_;
  const ::itd::communication::protobuf::Container* container_;
  const ::itd::communication::protobuf::Signboard* signboard_;
  const ::itd::communication::protobuf::LidarStatus* lidar_status_;
} _Message_default_instance_;
}  // namespace protobuf
}  // namespace communication
}  // namespace itd
namespace protobuf_msg_2eproto {
void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::itd::communication::protobuf::_Header_default_instance_;
    new (ptr) ::itd::communication::protobuf::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsPointCloudImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_PointCloud_default_instance_;
    new (ptr) ::itd::communication::protobuf::PointCloud();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::PointCloud::InitAsDefaultInstance();
}

void InitDefaultsPointCloud() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPointCloudImpl);
}

void InitDefaultsFreespaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_Freespace_default_instance_;
    new (ptr) ::itd::communication::protobuf::Freespace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Freespace::InitAsDefaultInstance();
}

void InitDefaultsFreespace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFreespaceImpl);
}

void InitDefaultsTrailerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_Trailer_default_instance_;
    new (ptr) ::itd::communication::protobuf::Trailer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Trailer::InitAsDefaultInstance();
}

void InitDefaultsTrailer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrailerImpl);
}

void InitDefaultsBridgeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_Bridge_default_instance_;
    new (ptr) ::itd::communication::protobuf::Bridge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Bridge::InitAsDefaultInstance();
}

void InitDefaultsBridge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBridgeImpl);
}

void InitDefaultsBoundryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_Boundry_default_instance_;
    new (ptr) ::itd::communication::protobuf::Boundry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Boundry::InitAsDefaultInstance();
}

void InitDefaultsBoundry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundryImpl);
}

void InitDefaultsContainerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_Container_default_instance_;
    new (ptr) ::itd::communication::protobuf::Container();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Container::InitAsDefaultInstance();
}

void InitDefaultsContainer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsContainerImpl);
}

void InitDefaultsSignboardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_Signboard_default_instance_;
    new (ptr) ::itd::communication::protobuf::Signboard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Signboard::InitAsDefaultInstance();
}

void InitDefaultsSignboard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignboardImpl);
}

void InitDefaultsLidarStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::itd::communication::protobuf::_LidarStatus_default_instance_;
    new (ptr) ::itd::communication::protobuf::LidarStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::LidarStatus::InitAsDefaultInstance();
}

void InitDefaultsLidarStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarStatusImpl);
}

void InitDefaultsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_2eproto::InitDefaultsPointCloud();
  protobuf_msg_2eproto::InitDefaultsFreespace();
  protobuf_msg_2eproto::InitDefaultsTrailer();
  protobuf_msg_2eproto::InitDefaultsBridge();
  protobuf_msg_2eproto::InitDefaultsBoundry();
  protobuf_msg_2eproto::InitDefaultsContainer();
  protobuf_msg_2eproto::InitDefaultsSignboard();
  protobuf_msg_2eproto::InitDefaultsLidarStatus();
  {
    void* ptr = &::itd::communication::protobuf::_Message_default_instance_;
    new (ptr) ::itd::communication::protobuf::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::itd::communication::protobuf::Message::InitAsDefaultInstance();
}

void InitDefaultsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Header, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Header, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Header, frame_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, azimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, hor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::PointCloud, distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Freespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Freespace, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Freespace, distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Trailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Trailer, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Trailer, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Trailer, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Trailer, flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Bridge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Bridge, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Bridge, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Bridge, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Bridge, flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Boundry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Boundry, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Boundry, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Boundry, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Boundry, flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Container, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Container, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Container, flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Signboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Signboard, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Signboard, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Signboard, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Signboard, angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::LidarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::LidarStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::LidarStatus, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::LidarStatus, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::LidarStatus, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::LidarStatus, single_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Message, type_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, cloud_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, fs_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, trailer_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, bridge_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, boundry_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, container_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, signboard_),
  offsetof(::itd::communication::protobuf::MessageDefaultTypeInternal, lidar_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::itd::communication::protobuf::Message, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::itd::communication::protobuf::Header)},
  { 8, -1, sizeof(::itd::communication::protobuf::PointCloud)},
  { 25, -1, sizeof(::itd::communication::protobuf::Freespace)},
  { 32, -1, sizeof(::itd::communication::protobuf::Trailer)},
  { 41, -1, sizeof(::itd::communication::protobuf::Bridge)},
  { 50, -1, sizeof(::itd::communication::protobuf::Boundry)},
  { 59, -1, sizeof(::itd::communication::protobuf::Container)},
  { 67, -1, sizeof(::itd::communication::protobuf::Signboard)},
  { 76, -1, sizeof(::itd::communication::protobuf::LidarStatus)},
  { 86, -1, sizeof(::itd::communication::protobuf::Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_PointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Freespace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Trailer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Bridge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Boundry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Container_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Signboard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_LidarStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::itd::communication::protobuf::_Message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tmsg.proto\022\032itd.communication.protobuf\""
      "6\n\006Header\022\013\n\003seq\030\001 \001(\r\022\r\n\005stamp\030\002 \001(\005\022\020\n"
      "\010frame_id\030\003 \001(\t\"\346\001\n\nPointCloud\0222\n\006header"
      "\030\001 \001(\0132\".itd.communication.protobuf.Head"
      "er\022\016\n\006height\030\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\t\n\001x\030\004"
      " \003(\002\022\t\n\001y\030\005 \003(\002\022\t\n\001z\030\006 \003(\002\022\021\n\tintensity\030"
      "\007 \003(\002\022\014\n\004ring\030\010 \003(\002\022\017\n\007azimuth\030\t \003(\002\022\013\n\003"
      "hor\030\n \003(\002\022\023\n\013time_offset\030\013 \003(\002\022\020\n\010distan"
      "ce\030\014 \003(\002\"Q\n\tFreespace\0222\n\006header\030\001 \001(\0132\"."
      "itd.communication.protobuf.Header\022\020\n\010dis"
      "tance\030\002 \003(\002\"a\n\007Trailer\0222\n\006header\030\001 \001(\0132\""
      ".itd.communication.protobuf.Header\022\t\n\001k\030"
      "\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\014\n\004flag\030\004 \001(\005\"`\n\006Bridge"
      "\0222\n\006header\030\001 \001(\0132\".itd.communication.pro"
      "tobuf.Header\022\t\n\001k\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\014\n\004fl"
      "ag\030\004 \001(\005\"a\n\007Boundry\0222\n\006header\030\001 \001(\0132\".it"
      "d.communication.protobuf.Header\022\t\n\001k\030\002 \001"
      "(\002\022\t\n\001b\030\003 \001(\002\022\014\n\004flag\030\004 \001(\005\"_\n\tContainer"
      "\0222\n\006header\030\001 \001(\0132\".itd.communication.pro"
      "tobuf.Header\022\020\n\010distance\030\002 \001(\002\022\014\n\004flag\030\003"
      " \001(\005\"d\n\tSignboard\0222\n\006header\030\001 \001(\0132\".itd."
      "communication.protobuf.Header\022\t\n\001x\030\002 \001(\002"
      "\022\t\n\001y\030\003 \001(\002\022\r\n\005angle\030\004 \001(\002\"{\n\013LidarStatu"
      "s\0222\n\006header\030\001 \001(\0132\".itd.communication.pr"
      "otobuf.Header\022\014\n\004left\030\002 \001(\005\022\r\n\005right\030\003 \001"
      "(\005\022\013\n\003top\030\004 \001(\005\022\016\n\006single\030\005 \001(\005\"\240\005\n\007Mess"
      "age\022=\n\004type\030\010 \001(\0162/.itd.communication.pr"
      "otobuf.Message.MessageType\0227\n\005cloud\030\t \001("
      "\0132&.itd.communication.protobuf.PointClou"
      "dH\000\0223\n\002fs\030\n \001(\0132%.itd.communication.prot"
      "obuf.FreespaceH\000\0226\n\007trailer\030\013 \001(\0132#.itd."
      "communication.protobuf.TrailerH\000\0224\n\006brid"
      "ge\030\014 \001(\0132\".itd.communication.protobuf.Br"
      "idgeH\000\0226\n\007boundry\030\r \001(\0132#.itd.communicat"
      "ion.protobuf.BoundryH\000\022:\n\tcontainer\030\016 \001("
      "\0132%.itd.communication.protobuf.Container"
      "H\000\022:\n\tsignboard\030\017 \001(\0132%.itd.communicatio"
      "n.protobuf.SignboardH\000\022\?\n\014lidar_status\030\020"
      " \001(\0132\'.itd.communication.protobuf.LidarS"
      "tatusH\000\"\201\001\n\013MessageType\022\016\n\nPointCloud\020\000\022"
      "\r\n\tFreespace\020\001\022\013\n\007Trailer\020\002\022\n\n\006Bridge\020\003\022"
      "\013\n\007Boundry\020\004\022\r\n\tContainer\020\005\022\r\n\tSignboard"
      "\020\006\022\017\n\013LidarStatus\020\007B\005\n\003msgB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_2eproto
namespace itd {
namespace communication {
namespace protobuf {
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_enum_descriptors[0];
}
bool Message_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_MessageType Message::PointCloud;
const Message_MessageType Message::Freespace;
const Message_MessageType Message::Trailer;
const Message_MessageType Message::Bridge;
const Message_MessageType Message::Boundry;
const Message_MessageType Message::Container;
const Message_MessageType Message::Signboard;
const Message_MessageType Message::LidarStatus;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kSeqFieldNumber;
const int Header::kStampFieldNumber;
const int Header::kFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Header)
}
Header::Header(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsHeader();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_id().size() > 0) {
    frame_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id(),
      GetArenaNoVirtual());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&stamp_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(stamp_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Header)
}

void Header::SharedCtor() {
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stamp_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(stamp_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Header>(arena);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stamp_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(stamp_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "itd.communication.protobuf.Header.frame_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // int32 stamp = 2;
  if (this->stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stamp(), output);
  }

  // string frame_id = 3;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itd.communication.protobuf.Header.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->frame_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // int32 stamp = 2;
  if (this->stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stamp(), target);
  }

  // string frame_id = 3;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "itd.communication.protobuf.Header.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string frame_id = 3;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // int32 stamp = 2;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id().size() > 0) {
    set_frame_id(from.frame_id());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Header* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Header::UnsafeArenaSwap(Header* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  frame_id_.Swap(&other->frame_id_);
  swap(seq_, other->seq_);
  swap(stamp_, other->stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointCloud::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_PointCloud_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void PointCloud::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void PointCloud::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.PointCloud.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kHeaderFieldNumber;
const int PointCloud::kHeightFieldNumber;
const int PointCloud::kWidthFieldNumber;
const int PointCloud::kXFieldNumber;
const int PointCloud::kYFieldNumber;
const int PointCloud::kZFieldNumber;
const int PointCloud::kIntensityFieldNumber;
const int PointCloud::kRingFieldNumber;
const int PointCloud::kAzimuthFieldNumber;
const int PointCloud::kHorFieldNumber;
const int PointCloud::kTimeOffsetFieldNumber;
const int PointCloud::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsPointCloud();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.PointCloud)
}
PointCloud::PointCloud(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  x_(arena),
  y_(arena),
  z_(arena),
  intensity_(arena),
  ring_(arena),
  azimuth_(arena),
  hor_(arena),
  time_offset_(arena),
  distance_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsPointCloud();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      x_(from.x_),
      y_(from.y_),
      z_(from.z_),
      intensity_(from.intensity_),
      ring_(from.ring_),
      azimuth_(from.azimuth_),
      hor_(from.hor_),
      time_offset_(from.time_offset_),
      distance_(from.distance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.PointCloud)
}

void PointCloud::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&header_)) + sizeof(width_));
  _cached_size_ = 0;
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void PointCloud::ArenaDtor(void* object) {
  PointCloud* _this = reinterpret_cast< PointCloud* >(object);
  (void)_this;
}
void PointCloud::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointCloud& PointCloud::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsPointCloud();
  return *internal_default_instance();
}

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PointCloud>(arena);
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  z_.Clear();
  intensity_.Clear();
  ring_.Clear();
  azimuth_.Clear();
  hor_.Clear();
  time_offset_.Clear();
  distance_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
  _internal_metadata_.Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float intensity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_intensity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_intensity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ring = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ring())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_ring())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float azimuth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_azimuth())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_azimuth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float hor = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hor())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_hor())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float time_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_time_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_time_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_distance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // repeated float x = 4;
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _x_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->x().data(), this->x_size(), output);
  }

  // repeated float y = 5;
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _y_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->y().data(), this->y_size(), output);
  }

  // repeated float z = 6;
  if (this->z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _z_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->z().data(), this->z_size(), output);
  }

  // repeated float intensity = 7;
  if (this->intensity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _intensity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->intensity().data(), this->intensity_size(), output);
  }

  // repeated float ring = 8;
  if (this->ring_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ring_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ring().data(), this->ring_size(), output);
  }

  // repeated float azimuth = 9;
  if (this->azimuth_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _azimuth_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->azimuth().data(), this->azimuth_size(), output);
  }

  // repeated float hor = 10;
  if (this->hor_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hor_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->hor().data(), this->hor_size(), output);
  }

  // repeated float time_offset = 11;
  if (this->time_offset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _time_offset_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->time_offset().data(), this->time_offset_size(), output);
  }

  // repeated float distance = 12;
  if (this->distance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _distance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->distance().data(), this->distance_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // repeated float x = 4;
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _x_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->x_, target);
  }

  // repeated float y = 5;
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _y_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->y_, target);
  }

  // repeated float z = 6;
  if (this->z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _z_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->z_, target);
  }

  // repeated float intensity = 7;
  if (this->intensity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _intensity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->intensity_, target);
  }

  // repeated float ring = 8;
  if (this->ring_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ring_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ring_, target);
  }

  // repeated float azimuth = 9;
  if (this->azimuth_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _azimuth_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->azimuth_, target);
  }

  // repeated float hor = 10;
  if (this->hor_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _hor_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->hor_, target);
  }

  // repeated float time_offset = 11;
  if (this->time_offset_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _time_offset_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->time_offset_, target);
  }

  // repeated float distance = 12;
  if (this->distance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _distance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->distance_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.PointCloud)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float x = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float z = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->z_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float intensity = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->intensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intensity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float ring = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->ring_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ring_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float azimuth = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->azimuth_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _azimuth_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float hor = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->hor_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hor_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float time_offset = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->time_offset_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _time_offset_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float distance = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->distance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _distance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  intensity_.MergeFrom(from.intensity_);
  ring_.MergeFrom(from.ring_);
  azimuth_.MergeFrom(from.azimuth_);
  hor_.MergeFrom(from.hor_);
  time_offset_.MergeFrom(from.time_offset_);
  distance_.MergeFrom(from.distance_);
  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PointCloud* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PointCloud::UnsafeArenaSwap(PointCloud* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  z_.InternalSwap(&other->z_);
  intensity_.InternalSwap(&other->intensity_);
  ring_.InternalSwap(&other->ring_);
  azimuth_.InternalSwap(&other->azimuth_);
  hor_.InternalSwap(&other->hor_);
  time_offset_.InternalSwap(&other->time_offset_);
  distance_.InternalSwap(&other->distance_);
  swap(header_, other->header_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Freespace::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Freespace_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void Freespace::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void Freespace::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.Freespace.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Freespace::kHeaderFieldNumber;
const int Freespace::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Freespace::Freespace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsFreespace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Freespace)
}
Freespace::Freespace(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  distance_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsFreespace();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Freespace)
}
Freespace::Freespace(const Freespace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      distance_(from.distance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Freespace)
}

void Freespace::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

Freespace::~Freespace() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Freespace)
  SharedDtor();
}

void Freespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void Freespace::ArenaDtor(void* object) {
  Freespace* _this = reinterpret_cast< Freespace* >(object);
  (void)_this;
}
void Freespace::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Freespace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Freespace::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Freespace& Freespace::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsFreespace();
  return *internal_default_instance();
}

Freespace* Freespace::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Freespace>(arena);
}

void Freespace::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Freespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool Freespace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Freespace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_distance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Freespace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Freespace)
  return false;
#undef DO_
}

void Freespace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Freespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated float distance = 2;
  if (this->distance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _distance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->distance().data(), this->distance_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Freespace)
}

::google::protobuf::uint8* Freespace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Freespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated float distance = 2;
  if (this->distance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _distance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->distance_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Freespace)
  return target;
}

size_t Freespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Freespace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float distance = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->distance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _distance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Freespace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Freespace)
  GOOGLE_DCHECK_NE(&from, this);
  const Freespace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Freespace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Freespace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Freespace)
    MergeFrom(*source);
  }
}

void Freespace::MergeFrom(const Freespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Freespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distance_.MergeFrom(from.distance_);
  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
}

void Freespace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Freespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Freespace::CopyFrom(const Freespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Freespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Freespace::IsInitialized() const {
  return true;
}

void Freespace::Swap(Freespace* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Freespace* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Freespace::UnsafeArenaSwap(Freespace* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Freespace::InternalSwap(Freespace* other) {
  using std::swap;
  distance_.InternalSwap(&other->distance_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Freespace::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trailer::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Trailer_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void Trailer::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void Trailer::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.Trailer.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trailer::kHeaderFieldNumber;
const int Trailer::kKFieldNumber;
const int Trailer::kBFieldNumber;
const int Trailer::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trailer::Trailer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsTrailer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Trailer)
}
Trailer::Trailer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsTrailer();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Trailer)
}
Trailer::Trailer(const Trailer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&k_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Trailer)
}

void Trailer::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&header_)) + sizeof(flag_));
  _cached_size_ = 0;
}

Trailer::~Trailer() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Trailer)
  SharedDtor();
}

void Trailer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void Trailer::ArenaDtor(void* object) {
  Trailer* _this = reinterpret_cast< Trailer* >(object);
  (void)_this;
}
void Trailer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Trailer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trailer::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trailer& Trailer::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsTrailer();
  return *internal_default_instance();
}

Trailer* Trailer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Trailer>(arena);
}

void Trailer::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Trailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&k_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

bool Trailer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Trailer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Trailer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Trailer)
  return false;
#undef DO_
}

void Trailer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Trailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // float k = 2;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->k(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Trailer)
}

::google::protobuf::uint8* Trailer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Trailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // float k = 2;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->k(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Trailer)
  return target;
}

size_t Trailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Trailer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // float k = 2;
  if (this->k() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trailer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Trailer)
  GOOGLE_DCHECK_NE(&from, this);
  const Trailer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trailer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Trailer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Trailer)
    MergeFrom(*source);
  }
}

void Trailer::MergeFrom(const Trailer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Trailer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Trailer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Trailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trailer::CopyFrom(const Trailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Trailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trailer::IsInitialized() const {
  return true;
}

void Trailer::Swap(Trailer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Trailer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Trailer::UnsafeArenaSwap(Trailer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Trailer::InternalSwap(Trailer* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(k_, other->k_);
  swap(b_, other->b_);
  swap(flag_, other->flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trailer::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bridge::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Bridge_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void Bridge::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void Bridge::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.Bridge.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bridge::kHeaderFieldNumber;
const int Bridge::kKFieldNumber;
const int Bridge::kBFieldNumber;
const int Bridge::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bridge::Bridge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsBridge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Bridge)
}
Bridge::Bridge(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsBridge();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Bridge)
}
Bridge::Bridge(const Bridge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&k_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Bridge)
}

void Bridge::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&header_)) + sizeof(flag_));
  _cached_size_ = 0;
}

Bridge::~Bridge() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Bridge)
  SharedDtor();
}

void Bridge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void Bridge::ArenaDtor(void* object) {
  Bridge* _this = reinterpret_cast< Bridge* >(object);
  (void)_this;
}
void Bridge::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Bridge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bridge::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bridge& Bridge::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsBridge();
  return *internal_default_instance();
}

Bridge* Bridge::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Bridge>(arena);
}

void Bridge::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Bridge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&k_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

bool Bridge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Bridge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Bridge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Bridge)
  return false;
#undef DO_
}

void Bridge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Bridge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // float k = 2;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->k(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Bridge)
}

::google::protobuf::uint8* Bridge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Bridge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // float k = 2;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->k(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Bridge)
  return target;
}

size_t Bridge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Bridge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // float k = 2;
  if (this->k() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bridge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Bridge)
  GOOGLE_DCHECK_NE(&from, this);
  const Bridge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bridge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Bridge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Bridge)
    MergeFrom(*source);
  }
}

void Bridge::MergeFrom(const Bridge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Bridge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Bridge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Bridge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bridge::CopyFrom(const Bridge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Bridge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bridge::IsInitialized() const {
  return true;
}

void Bridge::Swap(Bridge* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Bridge* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Bridge::UnsafeArenaSwap(Bridge* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Bridge::InternalSwap(Bridge* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(k_, other->k_);
  swap(b_, other->b_);
  swap(flag_, other->flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bridge::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Boundry::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Boundry_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void Boundry::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void Boundry::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.Boundry.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Boundry::kHeaderFieldNumber;
const int Boundry::kKFieldNumber;
const int Boundry::kBFieldNumber;
const int Boundry::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Boundry::Boundry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsBoundry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Boundry)
}
Boundry::Boundry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsBoundry();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Boundry)
}
Boundry::Boundry(const Boundry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&k_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Boundry)
}

void Boundry::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&header_)) + sizeof(flag_));
  _cached_size_ = 0;
}

Boundry::~Boundry() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Boundry)
  SharedDtor();
}

void Boundry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void Boundry::ArenaDtor(void* object) {
  Boundry* _this = reinterpret_cast< Boundry* >(object);
  (void)_this;
}
void Boundry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Boundry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boundry::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Boundry& Boundry::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsBoundry();
  return *internal_default_instance();
}

Boundry* Boundry::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Boundry>(arena);
}

void Boundry::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Boundry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&k_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

bool Boundry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Boundry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Boundry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Boundry)
  return false;
#undef DO_
}

void Boundry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Boundry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // float k = 2;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->k(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Boundry)
}

::google::protobuf::uint8* Boundry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Boundry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // float k = 2;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->k(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Boundry)
  return target;
}

size_t Boundry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Boundry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // float k = 2;
  if (this->k() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boundry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Boundry)
  GOOGLE_DCHECK_NE(&from, this);
  const Boundry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Boundry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Boundry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Boundry)
    MergeFrom(*source);
  }
}

void Boundry::MergeFrom(const Boundry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Boundry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Boundry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Boundry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boundry::CopyFrom(const Boundry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Boundry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boundry::IsInitialized() const {
  return true;
}

void Boundry::Swap(Boundry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Boundry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Boundry::UnsafeArenaSwap(Boundry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Boundry::InternalSwap(Boundry* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(k_, other->k_);
  swap(b_, other->b_);
  swap(flag_, other->flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Boundry::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Container::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Container_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void Container::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void Container::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.Container.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Container::kHeaderFieldNumber;
const int Container::kDistanceFieldNumber;
const int Container::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Container::Container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsContainer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Container)
}
Container::Container(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsContainer();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Container)
}
Container::Container(const Container& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Container)
}

void Container::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&header_)) + sizeof(flag_));
  _cached_size_ = 0;
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void Container::ArenaDtor(void* object) {
  Container* _this = reinterpret_cast< Container* >(object);
  (void)_this;
}
void Container::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Container& Container::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsContainer();
  return *internal_default_instance();
}

Container* Container::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Container>(arena);
}

void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Container)
  return false;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Container)
}

::google::protobuf::uint8* Container::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Container)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Container)
  GOOGLE_DCHECK_NE(&from, this);
  const Container* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Container>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Container)
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Container)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::Swap(Container* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Container* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Container::UnsafeArenaSwap(Container* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Container::InternalSwap(Container* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(distance_, other->distance_);
  swap(flag_, other->flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signboard::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Signboard_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void Signboard::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void Signboard::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.Signboard.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signboard::kHeaderFieldNumber;
const int Signboard::kXFieldNumber;
const int Signboard::kYFieldNumber;
const int Signboard::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signboard::Signboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsSignboard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Signboard)
}
Signboard::Signboard(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsSignboard();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Signboard)
}
Signboard::Signboard(const Signboard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Signboard)
}

void Signboard::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&header_)) + sizeof(angle_));
  _cached_size_ = 0;
}

Signboard::~Signboard() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Signboard)
  SharedDtor();
}

void Signboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void Signboard::ArenaDtor(void* object) {
  Signboard* _this = reinterpret_cast< Signboard* >(object);
  (void)_this;
}
void Signboard::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Signboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signboard::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signboard& Signboard::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsSignboard();
  return *internal_default_instance();
}

Signboard* Signboard::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Signboard>(arena);
}

void Signboard::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Signboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

bool Signboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Signboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Signboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Signboard)
  return false;
#undef DO_
}

void Signboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Signboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Signboard)
}

::google::protobuf::uint8* Signboard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Signboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Signboard)
  return target;
}

size_t Signboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Signboard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float angle = 4;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Signboard)
  GOOGLE_DCHECK_NE(&from, this);
  const Signboard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Signboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Signboard)
    MergeFrom(*source);
  }
}

void Signboard::MergeFrom(const Signboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Signboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void Signboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Signboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signboard::CopyFrom(const Signboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Signboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signboard::IsInitialized() const {
  return true;
}

void Signboard::Swap(Signboard* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Signboard* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Signboard::UnsafeArenaSwap(Signboard* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Signboard::InternalSwap(Signboard* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signboard::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarStatus::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_LidarStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::itd::communication::protobuf::Header*>(
      ::itd::communication::protobuf::Header::internal_default_instance());
}
void LidarStatus::_slow_mutable_header() {
  header_ = ::google::protobuf::Arena::CreateMessage< ::itd::communication::protobuf::Header >(
      GetArenaNoVirtual());
}
void LidarStatus::unsafe_arena_set_allocated_header(
    ::itd::communication::protobuf::Header* header) {
  if (GetArenaNoVirtual() == NULL) {
    delete header_;
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itd.communication.protobuf.LidarStatus.header)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarStatus::kHeaderFieldNumber;
const int LidarStatus::kLeftFieldNumber;
const int LidarStatus::kRightFieldNumber;
const int LidarStatus::kTopFieldNumber;
const int LidarStatus::kSingleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarStatus::LidarStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsLidarStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.LidarStatus)
}
LidarStatus::LidarStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsLidarStatus();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.LidarStatus)
}
LidarStatus::LidarStatus(const LidarStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::itd::communication::protobuf::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_) -
    reinterpret_cast<char*>(&left_)) + sizeof(single_));
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.LidarStatus)
}

void LidarStatus::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_) -
      reinterpret_cast<char*>(&header_)) + sizeof(single_));
  _cached_size_ = 0;
}

LidarStatus::~LidarStatus() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.LidarStatus)
  SharedDtor();
}

void LidarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete header_;
}

void LidarStatus::ArenaDtor(void* object) {
  LidarStatus* _this = reinterpret_cast< LidarStatus* >(object);
  (void)_this;
}
void LidarStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LidarStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarStatus::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarStatus& LidarStatus::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsLidarStatus();
  return *internal_default_instance();
}

LidarStatus* LidarStatus::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LidarStatus>(arena);
}

void LidarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.LidarStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_) -
      reinterpret_cast<char*>(&left_)) + sizeof(single_));
  _internal_metadata_.Clear();
}

bool LidarStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.LidarStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 single = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.LidarStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.LidarStatus)
  return false;
#undef DO_
}

void LidarStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.LidarStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // int32 right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // int32 top = 4;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->top(), output);
  }

  // int32 single = 5;
  if (this->single() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->single(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.LidarStatus)
}

::google::protobuf::uint8* LidarStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.LidarStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // int32 right = 3;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // int32 top = 4;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->top(), target);
  }

  // int32 single = 5;
  if (this->single() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->single(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.LidarStatus)
  return target;
}

size_t LidarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.LidarStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 right = 3;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  // int32 top = 4;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 single = 5;
  if (this->single() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->single());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.LidarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.LidarStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.LidarStatus)
    MergeFrom(*source);
  }
}

void LidarStatus::MergeFrom(const LidarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.LidarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::itd::communication::protobuf::Header::MergeFrom(from.header());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.single() != 0) {
    set_single(from.single());
  }
}

void LidarStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.LidarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarStatus::CopyFrom(const LidarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.LidarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarStatus::IsInitialized() const {
  return true;
}

void LidarStatus::Swap(LidarStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LidarStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LidarStatus::UnsafeArenaSwap(LidarStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LidarStatus::InternalSwap(LidarStatus* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(top_, other->top_);
  swap(single_, other->single_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarStatus::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::itd::communication::protobuf::_Message_default_instance_.cloud_ = const_cast< ::itd::communication::protobuf::PointCloud*>(
      ::itd::communication::protobuf::PointCloud::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.fs_ = const_cast< ::itd::communication::protobuf::Freespace*>(
      ::itd::communication::protobuf::Freespace::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.trailer_ = const_cast< ::itd::communication::protobuf::Trailer*>(
      ::itd::communication::protobuf::Trailer::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.bridge_ = const_cast< ::itd::communication::protobuf::Bridge*>(
      ::itd::communication::protobuf::Bridge::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.boundry_ = const_cast< ::itd::communication::protobuf::Boundry*>(
      ::itd::communication::protobuf::Boundry::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.container_ = const_cast< ::itd::communication::protobuf::Container*>(
      ::itd::communication::protobuf::Container::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.signboard_ = const_cast< ::itd::communication::protobuf::Signboard*>(
      ::itd::communication::protobuf::Signboard::internal_default_instance());
  ::itd::communication::protobuf::_Message_default_instance_.lidar_status_ = const_cast< ::itd::communication::protobuf::LidarStatus*>(
      ::itd::communication::protobuf::LidarStatus::internal_default_instance());
}
void Message::set_allocated_cloud(::itd::communication::protobuf::PointCloud* cloud) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (cloud) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(cloud);
    if (message_arena != submessage_arena) {
      cloud = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud, submessage_arena);
    }
    set_has_cloud();
    msg_.cloud_ = cloud;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.cloud)
}
void Message::set_allocated_fs(::itd::communication::protobuf::Freespace* fs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (fs) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(fs);
    if (message_arena != submessage_arena) {
      fs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fs, submessage_arena);
    }
    set_has_fs();
    msg_.fs_ = fs;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.fs)
}
void Message::set_allocated_trailer(::itd::communication::protobuf::Trailer* trailer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (trailer) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(trailer);
    if (message_arena != submessage_arena) {
      trailer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trailer, submessage_arena);
    }
    set_has_trailer();
    msg_.trailer_ = trailer;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.trailer)
}
void Message::set_allocated_bridge(::itd::communication::protobuf::Bridge* bridge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (bridge) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(bridge);
    if (message_arena != submessage_arena) {
      bridge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bridge, submessage_arena);
    }
    set_has_bridge();
    msg_.bridge_ = bridge;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.bridge)
}
void Message::set_allocated_boundry(::itd::communication::protobuf::Boundry* boundry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (boundry) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(boundry);
    if (message_arena != submessage_arena) {
      boundry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, boundry, submessage_arena);
    }
    set_has_boundry();
    msg_.boundry_ = boundry;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.boundry)
}
void Message::set_allocated_container(::itd::communication::protobuf::Container* container) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (container) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(container);
    if (message_arena != submessage_arena) {
      container = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    set_has_container();
    msg_.container_ = container;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.container)
}
void Message::set_allocated_signboard(::itd::communication::protobuf::Signboard* signboard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (signboard) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(signboard);
    if (message_arena != submessage_arena) {
      signboard = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signboard, submessage_arena);
    }
    set_has_signboard();
    msg_.signboard_ = signboard;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.signboard)
}
void Message::set_allocated_lidar_status(::itd::communication::protobuf::LidarStatus* lidar_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (lidar_status) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(lidar_status);
    if (message_arena != submessage_arena) {
      lidar_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lidar_status, submessage_arena);
    }
    set_has_lidar_status();
    msg_.lidar_status_ = lidar_status;
  }
  // @@protoc_insertion_point(field_set_allocated:itd.communication.protobuf.Message.lidar_status)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kCloudFieldNumber;
const int Message::kFsFieldNumber;
const int Message::kTrailerFieldNumber;
const int Message::kBridgeFieldNumber;
const int Message::kBoundryFieldNumber;
const int Message::kContainerFieldNumber;
const int Message::kSignboardFieldNumber;
const int Message::kLidarStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_msg_2eproto::InitDefaultsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:itd.communication.protobuf.Message)
}
Message::Message(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_msg_2eproto::InitDefaultsMessage();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:itd.communication.protobuf.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kCloud: {
      mutable_cloud()->::itd::communication::protobuf::PointCloud::MergeFrom(from.cloud());
      break;
    }
    case kFs: {
      mutable_fs()->::itd::communication::protobuf::Freespace::MergeFrom(from.fs());
      break;
    }
    case kTrailer: {
      mutable_trailer()->::itd::communication::protobuf::Trailer::MergeFrom(from.trailer());
      break;
    }
    case kBridge: {
      mutable_bridge()->::itd::communication::protobuf::Bridge::MergeFrom(from.bridge());
      break;
    }
    case kBoundry: {
      mutable_boundry()->::itd::communication::protobuf::Boundry::MergeFrom(from.boundry());
      break;
    }
    case kContainer: {
      mutable_container()->::itd::communication::protobuf::Container::MergeFrom(from.container());
      break;
    }
    case kSignboard: {
      mutable_signboard()->::itd::communication::protobuf::Signboard::MergeFrom(from.signboard());
      break;
    }
    case kLidarStatus: {
      mutable_lidar_status()->::itd::communication::protobuf::LidarStatus::MergeFrom(from.lidar_status());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:itd.communication.protobuf.Message)
}

void Message::SharedCtor() {
  type_ = 0;
  clear_has_msg();
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:itd.communication.protobuf.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_msg()) {
    clear_msg();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::protobuf_msg_2eproto::InitDefaultsMessage();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Message>(arena);
}

void Message::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:itd.communication.protobuf.Message)
  switch (msg_case()) {
    case kCloud: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.cloud_;
      }
      break;
    }
    case kFs: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.fs_;
      }
      break;
    }
    case kTrailer: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.trailer_;
      }
      break;
    }
    case kBridge: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.bridge_;
      }
      break;
    }
    case kBoundry: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.boundry_;
      }
      break;
    }
    case kContainer: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.container_;
      }
      break;
    }
    case kSignboard: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.signboard_;
      }
      break;
    }
    case kLidarStatus: {
      if (GetArenaNoVirtual() == NULL) {
        delete msg_.lidar_status_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:itd.communication.protobuf.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_msg();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itd.communication.protobuf.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .itd.communication.protobuf.Message.MessageType type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::itd::communication::protobuf::Message_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.PointCloud cloud = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.Freespace fs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.Trailer trailer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trailer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.Bridge bridge = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bridge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.Boundry boundry = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.Container container = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.Signboard signboard = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .itd.communication.protobuf.LidarStatus lidar_status = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itd.communication.protobuf.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itd.communication.protobuf.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itd.communication.protobuf.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Message.MessageType type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // .itd.communication.protobuf.PointCloud cloud = 9;
  if (has_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *msg_.cloud_, output);
  }

  // .itd.communication.protobuf.Freespace fs = 10;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *msg_.fs_, output);
  }

  // .itd.communication.protobuf.Trailer trailer = 11;
  if (has_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *msg_.trailer_, output);
  }

  // .itd.communication.protobuf.Bridge bridge = 12;
  if (has_bridge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *msg_.bridge_, output);
  }

  // .itd.communication.protobuf.Boundry boundry = 13;
  if (has_boundry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *msg_.boundry_, output);
  }

  // .itd.communication.protobuf.Container container = 14;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *msg_.container_, output);
  }

  // .itd.communication.protobuf.Signboard signboard = 15;
  if (has_signboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *msg_.signboard_, output);
  }

  // .itd.communication.protobuf.LidarStatus lidar_status = 16;
  if (has_lidar_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *msg_.lidar_status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:itd.communication.protobuf.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:itd.communication.protobuf.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .itd.communication.protobuf.Message.MessageType type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // .itd.communication.protobuf.PointCloud cloud = 9;
  if (has_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *msg_.cloud_, deterministic, target);
  }

  // .itd.communication.protobuf.Freespace fs = 10;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *msg_.fs_, deterministic, target);
  }

  // .itd.communication.protobuf.Trailer trailer = 11;
  if (has_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *msg_.trailer_, deterministic, target);
  }

  // .itd.communication.protobuf.Bridge bridge = 12;
  if (has_bridge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *msg_.bridge_, deterministic, target);
  }

  // .itd.communication.protobuf.Boundry boundry = 13;
  if (has_boundry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *msg_.boundry_, deterministic, target);
  }

  // .itd.communication.protobuf.Container container = 14;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *msg_.container_, deterministic, target);
  }

  // .itd.communication.protobuf.Signboard signboard = 15;
  if (has_signboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *msg_.signboard_, deterministic, target);
  }

  // .itd.communication.protobuf.LidarStatus lidar_status = 16;
  if (has_lidar_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *msg_.lidar_status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itd.communication.protobuf.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itd.communication.protobuf.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .itd.communication.protobuf.Message.MessageType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (msg_case()) {
    // .itd.communication.protobuf.PointCloud cloud = 9;
    case kCloud: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.cloud_);
      break;
    }
    // .itd.communication.protobuf.Freespace fs = 10;
    case kFs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.fs_);
      break;
    }
    // .itd.communication.protobuf.Trailer trailer = 11;
    case kTrailer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.trailer_);
      break;
    }
    // .itd.communication.protobuf.Bridge bridge = 12;
    case kBridge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.bridge_);
      break;
    }
    // .itd.communication.protobuf.Boundry boundry = 13;
    case kBoundry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.boundry_);
      break;
    }
    // .itd.communication.protobuf.Container container = 14;
    case kContainer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.container_);
      break;
    }
    // .itd.communication.protobuf.Signboard signboard = 15;
    case kSignboard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.signboard_);
      break;
    }
    // .itd.communication.protobuf.LidarStatus lidar_status = 16;
    case kLidarStatus: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.lidar_status_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:itd.communication.protobuf.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:itd.communication.protobuf.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:itd.communication.protobuf.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:itd.communication.protobuf.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.msg_case()) {
    case kCloud: {
      mutable_cloud()->::itd::communication::protobuf::PointCloud::MergeFrom(from.cloud());
      break;
    }
    case kFs: {
      mutable_fs()->::itd::communication::protobuf::Freespace::MergeFrom(from.fs());
      break;
    }
    case kTrailer: {
      mutable_trailer()->::itd::communication::protobuf::Trailer::MergeFrom(from.trailer());
      break;
    }
    case kBridge: {
      mutable_bridge()->::itd::communication::protobuf::Bridge::MergeFrom(from.bridge());
      break;
    }
    case kBoundry: {
      mutable_boundry()->::itd::communication::protobuf::Boundry::MergeFrom(from.boundry());
      break;
    }
    case kContainer: {
      mutable_container()->::itd::communication::protobuf::Container::MergeFrom(from.container());
      break;
    }
    case kSignboard: {
      mutable_signboard()->::itd::communication::protobuf::Signboard::MergeFrom(from.signboard());
      break;
    }
    case kLidarStatus: {
      mutable_lidar_status()->::itd::communication::protobuf::LidarStatus::MergeFrom(from.lidar_status());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:itd.communication.protobuf.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itd.communication.protobuf.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Message* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Message::UnsafeArenaSwap(Message* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace communication
}  // namespace itd

// @@protoc_insertion_point(global_scope)
